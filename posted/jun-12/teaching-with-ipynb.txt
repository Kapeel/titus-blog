Some early experience in teaching using ipython notebook
# tags python,ipynb,ngs

As part of the `2012 Analyzing Next-Generation Sequencing Data course
<http://bioinformatics.msu.edu/ngs-summer-course-2012>`__, I've been
trying out ipython notebook for the tutorials.

In previous years, our tutorials all looked like this: `Short read
assembly with Velvet
<http://ged.msu.edu/angus/tutorials-2011/short-read-assembly-velvet.html>`__
-- basically, reStructuredText files integrated with Sphinx.  This had a lot
of advantages, including Googleability and simplicity; but it also meant
that students spent a lot of time copying and pasting commands.

This year, I tried mixing things up with some ipython notebook, using
pre-written notebooks -- see for example a static view of the `BLAST
notebook
<http://ged.msu.edu/angus/tutorials-2012/files/static-ngs-10-blast.html>`__.
The notebooks are sourced at
https://github.com/ngs-docs/ngs-notebooks, and can be automatically
updated and placed on an EC2 instance for the students to run.  The
idea is that the students can simply shift-ENTER through the notebooks;
shell commands can easily be run with '!', and we can integrate in
python code that graphs and explores the outputs.

Once we got past the basic teething pains of badly written notebooks,
broken delivery mechanisms, proper ipython parameters, etc., things seemed
to work really well.  It's been great to be able to add code, annotate
code, and graph stuff interactively!

Along the way, though, a few points have emerged.

**First**, ipython notebook adds a little bit of confusion to the
process.  Even though it's pretty simple, when you're throwing it in
on top of UNIX, EC2, bioinformatics, and Python, people's minds tend
to boggle.

For this reason, it's not yet clear how good an addition ipynb is to
the course.  We can't get away with replacing the shell with ipynb,
for a variety of reasons; so it represents an extra cognitive burden.
I think for an entire term course it will be an unambiguous win, but
for an intensive workshop it may be one thing too many.

I should have a better feeling for this next week.

**Second**, in practice, ipython notebooks need to be written so that
they can be executed multiple times on the same machine.  Workshop
attendees start out very confused about the order of commands vs the
order of execution, and even though ipynb makes this relatively
simple, if they get into trouble it is nice to be able to tell them to
just rerun the entire notebook.  So the notebook commands have to be
designed this way -- for one example, if you're copying a file, make
sure to use 'cp -f' so that it doesn't ask if the file needs to be
copied again.

**Third**, in practice, ipython notebooks cannot contain long
commands.  If the entire notebook can't be re-run in about 1 minute,
then it's too long.  This became really clear with Oases and Trinity,
where Oases could easily be run on a small data set in about 1-2
minutes, while Trinity took an hour or more.  Neither people nor
browsers handle that well.  Moreover, if you accidentally run the
time-consuming task twice, you're stuck waiting for it to finish, and
it's annoying and confusing to put multi-execution guards on tasks.

This point is a known challenge with ipython notebook, of course; I've
been talking with Fernando and Brian, among others, about how to deal
with long running tasks.  I'm converging to the idea that long-running
tasks should be run at the command line (maybe using 'make' or
something better?) and then ipython notebook can be used for data analysis
leading to summaries and/or visualization.

**Fourth**, ipython notebooks are a bit difficult to share in static
form, which makes the site less useful.  Right now I've been printing
to HTML and then serving that HTML up statically, which is slow and
not all that satisfying.  There are probably easy solutions for this
but I haven't invested in them ;).

---

In spite of these teething pains, feedback surrounding ipynb has been
reasonably positive.  Remember, these are biologists who may never
have done any previous shell commands or programming, and we are
throwing a lot at them; but overall the basic concepts of ipynb are
simple, and they recognize that.  Moreover, ipython notebook has
enabled extra flexibility in what we present and make possible for
them to do, and they seem to see and appreciate that.

The good news is that we figured all this out in the first week, and I still
have a whole week with the guinea pigs, ahem, course attendees, under my
thumb.  We'll see how it goes!

--titus

p.s. Totally jonesing for a portfolio system that lets me specify a
machine config, then with a single click spawns the machine,
configures it, sucks down a bunch of ipython notebooks, and points me
at the first one!
